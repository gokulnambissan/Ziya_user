import 'package:flutter/services.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:printing/printing.dart';
import 'package:ziya_user/models/payslip_model.dart';

class SlipPdfGenerator {
  static Future<void> generateAndDownload(PayslipModel payslip) async {
    final pdf = pw.Document();
    final ttf = pw.Font.ttf(await rootBundle.load('assets/fonts/Roboto-Regular.ttf'));
    final logoBytes = await rootBundle.load('assets/vector.png');
    final logoImage = pw.MemoryImage(logoBytes.buffer.asUint8List());
    final watermarkBytes = await rootBundle.load('assets/vector.png');
    final watermarkImage = pw.MemoryImage(watermarkBytes.buffer.asUint8List());

    pdf.addPage(
      pw.MultiPage(
        margin: pw.EdgeInsets.all(24),
        build: (pw.Context context) => [
          pw.Stack(
            children: [
              pw.Positioned.fill(
                child: pw.Opacity(
                  opacity: 0.05,
                  child: pw.Center(
                    child: pw.Image(watermarkImage, width: 300, height: 300),
                  ),
                ),
              ),
              pw.Column(
                crossAxisAlignment: pw.CrossAxisAlignment.start,
                children: [
                  _buildHeader(ttf, logoImage, payslip),

                  pw.SizedBox(height: 20),
                  pw.Divider(),

                  // DETAILS
                  _buildEmployeeSummary(ttf, payslip),

                  pw.SizedBox(height: 16),
                  _buildPfAndUanRow(ttf, payslip),

                  pw.SizedBox(height: 16),
                  _buildEarningsDeductions(ttf, payslip),

                  pw.SizedBox(height: 20),
                  _buildSummary(ttf, payslip),

                  pw.SizedBox(height: 20),
                  _buildNetPay(ttf, payslip),

                  pw.SizedBox(height: 10),
                  _buildAmountInWords(ttf, payslip),

                  pw.SizedBox(height: 30),
                  pw.Divider(),
                  pw.Center(
                    child: pw.Text(
                      '- Generated by ZiyaAcademy -',
                      style: pw.TextStyle(font: ttf, fontSize: 9, color: PdfColors.grey700),
                    ),
                  ),
                ],
              ),
            ],
          ),
        ],
      ),
    );

    await Printing.layoutPdf(
        onLayout: (PdfPageFormat format) async => pdf.save());
  }

  static pw.Widget _buildHeader(pw.Font ttf, pw.MemoryImage logoImage, PayslipModel payslip) {
    return pw.Row(
      mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
      children: [
        pw.Row(
          children: [
            pw.Image(logoImage, width: 50, height: 50),
            pw.SizedBox(width: 10),
            pw.Column(
              crossAxisAlignment: pw.CrossAxisAlignment.start,
              children: [
                pw.Text('Ziya Academy',
                    style: pw.TextStyle(
                        font: ttf,
                        fontSize: 20,
                        fontWeight: pw.FontWeight.bold)),
                pw.Text('Key to Success',
                    style: pw.TextStyle(
                        font: ttf, fontSize: 12, color: PdfColors.grey700)),
              ],
            ),
          ],
        ),
        pw.Column(
          crossAxisAlignment: pw.CrossAxisAlignment.end,
          children: [
            pw.Text('Payslip',
                style: pw.TextStyle(font: ttf, fontSize: 14, fontWeight: pw.FontWeight.bold)),
            pw.Text(payslip.payPeriod,
                style: pw.TextStyle(font: ttf, fontSize: 12, color: PdfColors.grey800)),
          ],
        ),
      ],
    );
  }

  static pw.Widget _buildEmployeeSummary(pw.Font ttf, PayslipModel payslip) {
    return pw.Column(
      crossAxisAlignment: pw.CrossAxisAlignment.start,
      children: [
        pw.Text('Employee Details',
            style: pw.TextStyle(
                font: ttf,
                fontSize: 12,
                fontWeight: pw.FontWeight.bold,
                decoration: pw.TextDecoration.underline)),
        pw.SizedBox(height: 8),
        pw.Table(
          border: pw.TableBorder.all(color: PdfColors.grey400),
          children: [
            _row(ttf, 'Name', payslip.employeeName),
            _row(ttf, 'ID', payslip.employeeId),
            _row(ttf, 'Designation', payslip.designation),
            _row(ttf, 'Joining Date', payslip.dateOfJoining),
            _row(ttf, 'Pay Date', payslip.payDate),
          ],
        ),
      ],
    );
  }

  static pw.TableRow _row(pw.Font ttf, String k, String v) {
    return pw.TableRow(children: [
      pw.Padding(
        padding: pw.EdgeInsets.all(6),
        child: pw.Text(k, style: pw.TextStyle(font: ttf, fontSize: 10)),
      ),
      pw.Padding(
        padding: pw.EdgeInsets.all(6),
        child: pw.Text(v, style: pw.TextStyle(font: ttf, fontSize: 10)),
      ),
    ]);
  }

  static pw.Widget _buildPfAndUanRow(pw.Font ttf, PayslipModel payslip) {
    return pw.Row(
      mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
      children: [
        pw.Text('PF: ${payslip.pfNumber}',
            style: pw.TextStyle(font: ttf, fontSize: 10)),
        pw.Text('UAN: ${payslip.uan}', style: pw.TextStyle(font: ttf, fontSize: 10)),
      ],
    );
  }

  static pw.Widget _buildEarningsDeductions(pw.Font ttf, PayslipModel payslip) {
    final length = [
      payslip.earnings.length,
      payslip.deductions.length
    ].reduce((a, b) => a > b ? a : b);

    return pw.Column(
      crossAxisAlignment: pw.CrossAxisAlignment.start,
      children: [
        pw.Text('Earnings & Deductions',
            style: pw.TextStyle(font: ttf, fontSize: 12, fontWeight: pw.FontWeight.bold)),
        pw.SizedBox(height: 8),
        pw.Table(
          border: pw.TableBorder.all(color: PdfColors.grey300),
          columnWidths: {
            0: pw.FlexColumnWidth(2),
            1: pw.FlexColumnWidth(1),
            2: pw.FlexColumnWidth(2),
            3: pw.FlexColumnWidth(1),
          },
          children: [
            pw.TableRow(
              decoration: pw.BoxDecoration(color: PdfColors.grey200),
              children: [
                pw.Padding(
                    padding: pw.EdgeInsets.all(4),
                    child: pw.Text('EARNINGS', style: pw.TextStyle(font: ttf, fontSize: 9))),
                pw.Padding(
                    padding: pw.EdgeInsets.all(4),
                    child: pw.Text('AMOUNT', style: pw.TextStyle(font: ttf, fontSize: 9))),
                pw.Padding(
                    padding: pw.EdgeInsets.all(4),
                    child: pw.Text('DEDUCTIONS', style: pw.TextStyle(font: ttf, fontSize: 9))),
                pw.Padding(
                    padding: pw.EdgeInsets.all(4),
                    child: pw.Text('AMOUNT', style: pw.TextStyle(font: ttf, fontSize: 9))),
              ],
            ),
            ...List.generate(length, (i) {
              final eKey = i < payslip.earnings.length
                  ? payslip.earnings.keys.elementAt(i)
                  : '';
              final eAmt = i < payslip.earnings.length
                  ? payslip.earnings[eKey]!
                  : 0;

              final dKey = i < payslip.deductions.length
                  ? payslip.deductions.keys.elementAt(i)
                  : '';
              final dAmt = i < payslip.deductions.length
                  ? payslip.deductions[dKey]!
                  : 0;

              return pw.TableRow(children: [
                pw.Padding(
                    padding: pw.EdgeInsets.all(4),
                    child: pw.Text(eKey, style: pw.TextStyle(font: ttf, fontSize: 8))),
                pw.Padding(
                    padding: pw.EdgeInsets.all(4),
                    child: pw.Text('₹ ${eAmt.toStringAsFixed(0)}',
                        style: pw.TextStyle(font: ttf, fontSize: 8))),
                pw.Padding(
                    padding: pw.EdgeInsets.all(4),
                    child: pw.Text(dKey, style: pw.TextStyle(font: ttf, fontSize: 8))),
                pw.Padding(
                    padding: pw.EdgeInsets.all(4),
                    child: pw.Text('₹ ${dAmt.toStringAsFixed(0)}',
                        style: pw.TextStyle(font: ttf, fontSize: 8))),
              ]);
            }),
          ],
        ),
      ],
    );
  }

  static pw.Widget _buildSummary(pw.Font ttf, PayslipModel payslip) {
    return pw.Row(
      mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
      children: [
        pw.Text('Gross Earnings: ₹ ${payslip.grossEarnings.toStringAsFixed(0)}',
            style: pw.TextStyle(font: ttf, fontSize: 10)),
        pw.Text('Total Deductions: ₹ ${payslip.totalDeductions.toStringAsFixed(0)}',
            style: pw.TextStyle(font: ttf, fontSize: 10)),
      ],
    );
  }

  static pw.Widget _buildNetPay(pw.Font ttf, PayslipModel payslip) {
    return pw.Container(
      padding: pw.EdgeInsets.all(10),
      decoration: pw.BoxDecoration(
        color: PdfColors.green50,
        borderRadius: pw.BorderRadius.circular(6),
      ),
      child: pw.Row(
        mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
        children: [
          pw.Text('Net Payable:',
              style: pw.TextStyle(font: ttf, fontSize: 12, fontWeight: pw.FontWeight.bold)),
          pw.Text('₹ ${payslip.netPayable.toStringAsFixed(0)}',
              style: pw.TextStyle(font: ttf, fontSize: 14, fontWeight: pw.FontWeight.bold)),
        ],
      ),
    );
  }

  static pw.Widget _buildAmountInWords(pw.Font ttf, PayslipModel payslip) {
    return pw.Text(
        'Amount in Words: Indian Rupee ${_amountToWords(payslip.netPayable)} Only',
        style: pw.TextStyle(font: ttf, fontSize: 9));
  }

  static String _amountToWords(double amount) {
    final units = [
      '',
      'One',
      'Two',
      'Three',
      'Four',
      'Five',
      'Six',
      'Seven',
      'Eight',
      'Nine',
      'Ten',
      'Eleven',
      'Twelve',
      'Thirteen',
      'Fourteen',
      'Fifteen',
      'Sixteen',
      'Seventeen',
      'Eighteen',
      'Nineteen'
    ];
    final tens = [
      '',
      '',
      'Twenty',
      'Thirty',
      'Forty',
      'Fifty',
      'Sixty',
      'Seventy',
      'Eighty',
      'Ninety'
    ];

    String convert(int n) {
      if (n < 20) return units[n];
      if (n < 100) {
        return tens[n ~/ 10] + (n % 10 != 0 ? ' ${units[n % 10]}' : '');
      }
      if (n < 1000) {
        return '${units[n ~/ 100]} Hundred${n % 100 != 0 ? ' and ${convert(n % 100)}' : ''}';
      }
      if (n < 100000) {
        return '${convert(n ~/ 1000)} Thousand${n % 1000 != 0 ? ' ${convert(n % 1000)}' : ''}';
      }
      if (n < 10000000) {
        return '${convert(n ~/ 100000)} Lakh${n % 100000 != 0 ? ' ${convert(n % 100000)}' : ''}';
      }
      return '${convert(n ~/ 10000000)} Crore${n % 10000000 != 0 ? ' ${convert(n % 10000000)}' : ''}';
    }

    return convert(amount.toInt());
  }
}