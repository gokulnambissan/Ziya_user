import 'package:flutter/services.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:printing/printing.dart';
import 'package:ziya_user/models/payslip_model.dart';

class SlipPdfGenerator {
  static Future<void> generateAndDownload(PayslipModel payslip) async {
    final pdf = pw.Document();
    final logoBytes = await rootBundle.load('assets/vector.png');
    final logoImage = pw.MemoryImage(logoBytes.buffer.asUint8List());

    final watermarkBytes = await rootBundle.load('assets/vector.png');
    final watermarkImage = pw.MemoryImage(watermarkBytes.buffer.asUint8List());

    pdf.addPage(
      pw.MultiPage(
        margin: pw.EdgeInsets.all(16),
        build: (pw.Context context) => [
          pw.Stack(
            children: [
              pw.Positioned.fill(
                child: pw.Opacity(
                  opacity: 0.1,
                  child: pw.Center(
                    child: pw.Image(watermarkImage, width: 200, height: 200),
                  ),
                ),
              ),
              pw.Column(
                crossAxisAlignment: pw.CrossAxisAlignment.start,
                children: [
                  _buildHeader(logoImage, payslip),
                  pw.SizedBox(height: 16),
                  pw.Divider(),
                  _buildEmployeeSummary(payslip),
                  pw.SizedBox(height: 12),
                  _buildPfAndUanRow(payslip),
                  pw.SizedBox(height: 12),
                  _buildEarningsDeductionsRows(payslip),
                  pw.SizedBox(height: 16),
                  _buildSummary(payslip),
                  pw.SizedBox(height: 16),
                  _buildNetPayBox(payslip),
                  pw.SizedBox(height: 8),
                  _buildAmountInWords(payslip),
                  pw.SizedBox(height: 24),
                  pw.Divider(),
                  pw.Center(
                    child: pw.Text(
                      '- This document has been automatically generated by ZiyaAcademy -',
                      style: pw.TextStyle(fontSize: 10, color: PdfColors.grey),
                    ),
                  ),
                ],
              ),
            ],
          ),
        ],
      ),
    );

    await Printing.layoutPdf(onLayout: (PdfPageFormat format) async => pdf.save());
  }

  static pw.Widget _buildHeader(pw.MemoryImage logoImage, PayslipModel payslip) {
    return pw.Row(
      mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
      children: [
        pw.Row(
          children: [
            pw.Image(logoImage, width: 40, height: 40),
            pw.SizedBox(width: 8),
            pw.Column(
              crossAxisAlignment: pw.CrossAxisAlignment.start,
              children: [
                pw.Text('Ziya Academy',
                    style: pw.TextStyle(
                        fontSize: 18,
                        fontWeight: pw.FontWeight.bold,
                        color: PdfColors.blue)),
                pw.Text('KEY-TO SUCCESS',
                    style: pw.TextStyle(fontSize: 12, color: PdfColors.green)),
              ],
            ),
          ],
        ),
        pw.Column(
          crossAxisAlignment: pw.CrossAxisAlignment.end,
          children: [
            pw.Text('Payslip for the Month',
                style: pw.TextStyle(fontSize: 12, color: PdfColors.grey700)),
            pw.Text(payslip.payPeriod,
                style: pw.TextStyle(fontWeight: pw.FontWeight.bold)),
          ],
        ),
      ],
    );
  }

  static pw.Widget _buildEmployeeSummary(PayslipModel payslip) {
    return pw.Column(
      crossAxisAlignment: pw.CrossAxisAlignment.start,
      children: [
        pw.Text('EMPLOYEE SUMMARY',
            style: pw.TextStyle(fontWeight: pw.FontWeight.bold)),
        pw.SizedBox(height: 8),
        pw.Row(
          crossAxisAlignment: pw.CrossAxisAlignment.start,
          children: [
            pw.Expanded(
              flex: 3,
              child: pw.Column(
                crossAxisAlignment: pw.CrossAxisAlignment.start,
                children: [
                  _pdfInfoRow('Employee Name', payslip.employeeName),
                  _pdfInfoRow('Designation', payslip.designation),
                  _pdfInfoRow('Employee ID', payslip.employeeId),
                  _pdfInfoRow('Date of Joining', payslip.dateOfJoining),
                  _pdfInfoRow('Pay Period', payslip.payPeriod),
                  _pdfInfoRow('Pay Date', payslip.payDate),
                ],
              ),
            ),
            pw.SizedBox(width: 12),
            pw.Expanded(
              flex: 2,
              child: pw.Container(
                decoration: pw.BoxDecoration(
                  color: PdfColors.green100,
                  borderRadius: pw.BorderRadius.circular(12),
                ),
                child: pw.Column(
                  children: [
                    pw.Padding(
                      padding: pw.EdgeInsets.all(8),
                      child: pw.Row(
                        children: [
                          pw.Container(
                            width: 2,
                            height: 30,
                            color: PdfColors.green700,
                          ),
                          pw.SizedBox(width: 6),
                          pw.Column(
                            crossAxisAlignment: pw.CrossAxisAlignment.start,
                            children: [
                              pw.Text('â‚¹ ${payslip.netPayable.toStringAsFixed(0)}',
                                  style: pw.TextStyle(
                                      fontSize: 16,
                                      fontWeight: pw.FontWeight.bold)),
                              pw.Text('Employee Net Pay',
                                  style: pw.TextStyle(
                                      fontSize: 10, color: PdfColors.green800)),
                            ],
                          ),
                        ],
                      ),
                    ),
                    _buildDashedDivider(),
                    pw.Container(
                      width: double.infinity,
                      padding: pw.EdgeInsets.all(8),
                      decoration: pw.BoxDecoration(
                        color: PdfColors.white,
                        borderRadius: pw.BorderRadius.vertical(bottom: pw.Radius.circular(12)),
                        border: pw.Border.all(color: PdfColors.green700),
                      ),
                      child: pw.Column(
                        crossAxisAlignment: pw.CrossAxisAlignment.start,
                        children: [
                          pw.Text('Paid Days: 31',
                              style: pw.TextStyle(fontSize: 10, fontWeight: pw.FontWeight.bold)),
                          pw.SizedBox(height: 4),
                          pw.Text('LOP Days: 0',
                              style: pw.TextStyle(fontSize: 10, fontWeight: pw.FontWeight.bold)),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ],
    );
  }

  static pw.Widget _buildDashedDivider() {
    return pw.Row(
      mainAxisSize: pw.MainAxisSize.max,
      children: List.generate(120, (index) {
        return index % 2 == 0
            ? pw.Container(width: 2, height: 0.5, color: PdfColors.grey)
            : pw.Container(width: 2, height: 0.5, color: PdfColors.white);
      }),
    );
  }

  static pw.Widget _buildPfAndUanRow(PayslipModel payslip) {
    return pw.Row(
      children: [
        pw.Expanded(
          child: pw.Text('PF A/C Number: ${payslip.pfNumber}',
              style: pw.TextStyle(fontSize: 9, fontWeight: pw.FontWeight.bold)),
        ),
        pw.Text('UAN: ${payslip.uan}',
            style: pw.TextStyle(fontSize: 9, fontWeight: pw.FontWeight.bold)),
      ],
    );
  }

  static pw.Widget _buildEarningsDeductionsRows(PayslipModel payslip) {
    final length = payslip.earnings.length > payslip.deductions.length
        ? payslip.earnings.length
        : payslip.deductions.length;

    return pw.Column(
      children: [
        pw.Padding(
          padding: pw.EdgeInsets.all(10),
          child: pw.Row(
            children: [
              pw.Expanded(flex: 2, child: pw.Text('EARNINGS', style: pw.TextStyle(fontSize: 9, fontWeight: pw.FontWeight.bold))),
              pw.Expanded(child: pw.Text('AMOUNT', style: pw.TextStyle(fontSize: 9, fontWeight: pw.FontWeight.bold))),
              pw.Expanded(child: pw.Text('YTD', style: pw.TextStyle(fontSize: 9, fontWeight: pw.FontWeight.bold))),
              pw.SizedBox(width: 14),
              pw.Expanded(flex: 2, child: pw.Text('DEDUCTIONS', style: pw.TextStyle(fontSize: 9, fontWeight: pw.FontWeight.bold))),
              pw.Expanded(child: pw.Text('AMOUNT', style: pw.TextStyle(fontSize: 9, fontWeight: pw.FontWeight.bold))),
              pw.Expanded(child: pw.Text('YTD', style: pw.TextStyle(fontSize: 9, fontWeight: pw.FontWeight.bold))),
            ],
          ),
        ),
        pw.Divider(),
        ...List.generate(length, (i) {
          final eKey = i < payslip.earnings.length ? payslip.earnings.keys.elementAt(i) : '';
          final eAmt = i < payslip.earnings.length ? payslip.earnings[eKey]! : 0;
          final eYTD = i < payslip.earnings.length ? payslip.earningsYTD[eKey] ?? 0 : 0;

          final dKey = i < payslip.deductions.length ? payslip.deductions.keys.elementAt(i) : '';
          final dAmt = i < payslip.deductions.length ? payslip.deductions[dKey]! : 0;
          final dYTD = i < payslip.deductions.length ? payslip.deductionsYTD[dKey] ?? 0 : 0;

          return pw.Padding(
            padding: pw.EdgeInsets.symmetric(vertical: 6, horizontal: 8),
            child: pw.Row(
              children: [
                pw.Expanded(flex: 2, child: pw.Text(eKey, style: pw.TextStyle(fontSize: 9))),
                pw.Expanded(child: pw.Text('â‚¹ ${eAmt.toStringAsFixed(0)}', style: pw.TextStyle(fontSize: 8))),
                pw.Expanded(child: pw.Text('â‚¹ ${eYTD.toStringAsFixed(0)}', style: pw.TextStyle(fontSize: 8))),
                pw.SizedBox(width: 14),
                pw.Expanded(flex: 2, child: pw.Text(dKey, style: pw.TextStyle(fontSize: 8))),
                pw.Expanded(child: pw.Text('â‚¹ ${dAmt.toStringAsFixed(0)}', style: pw.TextStyle(fontSize: 8))),
                pw.Expanded(child: pw.Text('â‚¹ ${dYTD.toStringAsFixed(0)}', style: pw.TextStyle(fontSize: 8))),
              ],
            ),
          );
        }),
      ],
    );
  }

  static pw.Widget _buildSummary(PayslipModel payslip) {
    return pw.Container(
      color: PdfColors.blue50,
      padding: pw.EdgeInsets.all(8),
      child: pw.Row(
        children: [
          pw.Expanded(
            child: pw.Text(
              'Gross Earnings: â‚¹ ${payslip.grossEarnings.toStringAsFixed(0)}',
              style: pw.TextStyle(fontWeight: pw.FontWeight.bold, fontSize: 10),
            ),
          ),
          pw.Expanded(
            child: pw.Text(
              'Total Deductions: â‚¹ ${payslip.totalDeductions.toStringAsFixed(0)}',
              style: pw.TextStyle(fontWeight: pw.FontWeight.bold, fontSize: 10),
            ),
          ),
        ],
      ),
    );
  }

  static pw.Widget _buildNetPayBox(PayslipModel payslip) {
    return pw.Container(
      padding: pw.EdgeInsets.all(12),
      decoration: pw.BoxDecoration(
        border: pw.Border.all(color: PdfColors.grey400),
        borderRadius: pw.BorderRadius.circular(8),
      ),
      child: pw.Row(
        children: [
          pw.Expanded(
            flex: 3,
            child: pw.Column(
              crossAxisAlignment: pw.CrossAxisAlignment.start,
              children: [
                pw.Text('Total Net Payable',
                    style: pw.TextStyle(
                        fontWeight: pw.FontWeight.bold, fontSize: 12)),
                pw.Text('Gross Earnings - Total Deductions',
                    style: pw.TextStyle(fontSize: 10, color: PdfColors.grey600)),
              ],
            ),
          ),
          pw.Container(
            alignment: pw.Alignment.center,
            padding: pw.EdgeInsets.all(8),
            decoration: pw.BoxDecoration(
              color: PdfColors.green100,
              borderRadius: pw.BorderRadius.circular(6),
            ),
            child: pw.Text('â‚¹ ${payslip.netPayable.toStringAsFixed(0)}',
                style:
                pw.TextStyle(fontSize: 14, fontWeight: pw.FontWeight.bold)),
          ),
        ],
      ),
    );
  }

  static pw.Widget _buildAmountInWords(PayslipModel payslip) {
    return pw.Row(
      children: [
        pw.Text('Amount in Words: ',
            style: pw.TextStyle(fontSize: 10, fontWeight: pw.FontWeight.bold)),
        pw.Text('Indian Rupee ${_amountToWords(payslip.netPayable)} Only',
            style: pw.TextStyle(
                fontSize: 9,
                fontWeight: pw.FontWeight.bold,
                color: PdfColors.grey700)),
      ],
    );
  }

  static pw.Widget _pdfInfoRow(String label, String value) {
    return pw.Padding(
      padding: pw.EdgeInsets.symmetric(vertical: 2),
      child: pw.Row(
        children: [
          pw.Expanded(child: pw.Text(label, style: pw.TextStyle(fontSize: 10))),
          pw.Text(': '),
          pw.Expanded(
              child: pw.Text(value,
                  style: pw.TextStyle(fontSize: 10, fontWeight: pw.FontWeight.bold))),
        ],
      ),
    );
  }

//   static String _amountToWords(double amount) {
//     return "Forty-Five Thousand"; // Replace with a number-to-words converter ifÂ needed.
// }

static String _amountToWords(double amount) {
  final units = [
    '',
    'One',
    'Two',
    'Three',
    'Four',
    'Five',
    'Six',
    'Seven',
    'Eight',
    'Nine',
    'Ten',
    'Eleven',
    'Twelve',
    'Thirteen',
    'Fourteen',
    'Fifteen',
    'Sixteen',
    'Seventeen',
    'Eighteen',
    'Nineteen'
  ];
  final tens = [
    '',
    '',
    'Twenty',
    'Thirty',
    'Forty',
    'Fifty',
    'Sixty',
    'Seventy',
    'Eighty',
    'Ninety'
  ];

  String convert(int n) {
    if (n < 20) return units[n];
    if (n < 100) {
      return tens[n ~/ 10] + (n % 10 != 0 ? ' ${units[n % 10]}' : '');
    }
    if (n < 1000) {
      return '${units[n ~/ 100]} Hundred${n % 100 != 0 ? ' and ${convert(n % 100)}' : ''}';
    }
    if (n < 100000) {
      return '${convert(n ~/ 1000)} Thousand${n % 1000 != 0 ? ' ${convert(n % 1000)}' : ''}';
    }
    if (n < 10000000) {
      return '${convert(n ~/ 100000)} Lakh${n % 100000 != 0 ? ' ${convert(n % 100000)}' : ''}';
    }
    return '${convert(n ~/ 10000000)} Crore${n % 10000000 != 0 ? ' ${convert(n % 10000000)}' : ''}';
  }

  return convert(amount.toInt());
}
}